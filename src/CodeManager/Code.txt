package Controller.AdminMenu;

import Controller.InputFromKeyboard.InputData;
import Views.Admins.GoodsManagerMenu;
import Views.Admins.PersonnelManagementMenu;

public class ControlAdminMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1: 
                GoodsManagerMenu.Menu();
                break;
            case 2: 
                PersonnelManagementMenu.Menu();
                break;
            case 3: // Your information

                break;
            case 4:
                return false;
        }
        return true;
    }
}
package Controller.InputFromKeyboard;

import Model.AccessDatabase.AccessData;
import Model.AccessDatabase.DataProcessing;
import Views.ProgramLog;
import Views.ProgramLogException;

public class InputData implements LibraryInputData, ProgramLogException, ProgramLog {

    public static int InputUserChoose(int NumberOfOptions) {
        System.out.print(inputChooseNotify);
        String yourChoose = sc.nextLine();
        try {
            int numberOfChoose = Integer.parseInt(yourChoose);
            if (numberOfChoose < 0 || numberOfChoose > NumberOfOptions) {
                System.out.println(eUserChooseLength + "\n");
                return InputUserChoose(NumberOfOptions);
            }

            System.out.println("");
            return numberOfChoose;
        } catch (NumberFormatException e) {
            System.out.println(eUserChooseNotNumber);
        }
        System.out.println("");
        return InputUserChoose(NumberOfOptions);
    }

    // UserName is mobile number
    public static String InputUserName() {
        System.out.print(inputUserName);
        String UserName = sc.nextLine();
        if (CheckStringAllIsNumber(UserName)) {
            if (UserName.length() == 10) {
                return UserName;
            } else {
                System.out.println(eLengthMobilNumber);
                return InputUserName();
            }
        } else {
            System.out.println(eUserNameIsNumber);
            return InputUserName();
        }
    }

    // Password is letter and number
    public static String InputPassword() {
        System.out.print(inputPassword);
        String Password = sc.nextLine();
        if (CheckStringIsNumberAndLetter(Password)) {
            if (Password.length() >= 6 && Password.length() <= 12) {
                return Password;
            } else {
                System.out.println(ePasswordLength);
                return InputPassword();
            }
        } else {
            System.out.println(ePasswordIsNumberAndLetter);
            return InputPassword();
        }
    }

    public static String InputSecurityQuestion() {

        System.out.println(SecurityQuestion);
        System.out.println("(1)" + SecurityQuestion1);
        System.out.println("(2)" + SecurityQuestion2);
        System.out.println("(3)" + SecurityQuestion3);

        switch (InputUserChoose(3)) {
            case 1:
                return SecurityQuestion1;
            case 2:
                return SecurityQuestion2;
            case 3:
                return SecurityQuestion3;
        }
        return "";
    }

    public static String InputSecurityAnswer() {
        System.out.print(inputSecurityAnswer);
        String answer = sc.nextLine();
        if (CheckStringAllIsLetter(answer)) {
            return answer;
        } else {
            System.out.println(eStringAllNotLetter);
            return InputSecurityQuestion();
        }
    }

    public static String InputAdminCode() {
        System.out.print(inputAdminCode);
        String AdminCode = sc.nextLine();
        if (CheckStringAllIsNumber(AdminCode)) {
            return AdminCode;
        } else {
            System.out.println(eAdminCode);
            return InputAdminCode();
        }
    }

    public static String InputInfoName() {
        System.out.print(inputInfoName);
        String name = sc.nextLine();
        if (CheckStringAllIsLetter(name)) {
            return name;
        } else {
            System.out.println(eInputInfoName);
            return InputInfoName();
        }
    }

    public static String InputInfoAge() {
        System.out.print(inputInfoAge);
        String age = sc.nextLine();
        if (CheckStringAllIsNumber(age)) {
            return age;
        } else {
            System.out.println(eInputInfoAge);
            return InputInfoAge();
        }
    }

    public static String InputInfoAddress() {
        System.out.print(inputInfoAddress);
        String address = sc.nextLine();
        if (CheckAddress(address)) {
            return address;
        } else {
            System.out.println(eInputInfoAddress);
            return InputInfoAddress();
        }
    }

    public static boolean ContinueOrExit() {
        System.out.println(ContinueOrExitMenu);
        switch (InputUserChoose(2)) {
            case 1:
                return true;
            case 2:
                return false;
        }
        return false;
    }

    public static boolean CheckAddress(String address) {
        address = address.replaceAll(" ", "");
        address = address.replaceAll("-", "");
        return CheckStringIsNumberAndLetter(address);
    }

    public static boolean CheckStringAllIsLetter(String StringNeedCheck) {
        for (int i = 0; i < StringNeedCheck.length(); ++i) {
            if (!Character.isLetter(StringNeedCheck.charAt(i)) && StringNeedCheck.charAt(i) != ' ') {
                return false;
            }
        }
        return true;
    }

    public static boolean CheckStringAllIsNumber(String StringNeedCheck) {
        String StringForm = "0123456789";
        for (int i = 0; i < StringNeedCheck.length(); ++i) {
            if (!StringForm.contains(String.valueOf(StringNeedCheck.charAt(i)))) {
                return false;
            }
        }
        return true;
    }

    public static boolean CheckStringIsNumberAndLetter(String StringNeedCheck) {
        String StringForm = "qwertyuioplkjhgfdsazxcvbnm0123456789QWERTYUIOPLKJHGFDSAZXCVBNM";
        for (int i = 0; i < StringNeedCheck.length(); ++i) {
            if (!StringForm.contains(String.valueOf(StringNeedCheck.charAt(i)))) {
                return false;
            }
        }
        return true;
    }

    public static boolean CheckUserNameIsOnly(String Username) {
        AccessData.getUserAccount();
        AccessData.getPersonnelAccount();
        AccessData.getAdminAccount();
        for (String account : DataProcessing.UsersAccount) {
            if (InputData.CutStringFrom(account, 2).equals(Username)) {
                return false;
            }
        }
        for (String account : DataProcessing.PersonnelAccounts) {
            if (InputData.CutStringFrom(account, 2).equals(Username)) {
                return false;
            }
        }
        for (String account : DataProcessing.AdminsAccounts) {
            if (InputData.CutStringFrom(account, 2).equals(Username)) {
                return false;
            }
        }

        return true;
    }

    public static String CutStringFrom(String StringNeedCut, int Start) {
        // Datatype is "|...|...|" so start is number of "|"
        int count = 0;
        while (count != Start) {
            StringNeedCut = StringNeedCut.substring(StringNeedCut.indexOf("|") + 1);
            ++count;
        }
        return StringNeedCut.substring(0, StringNeedCut.indexOf("|"));
    }

}
package Controller.InputFromKeyboard;

import java.util.Scanner;

public interface LibraryInputData {
    Scanner sc = new Scanner(System.in);
}
package Controller.MainMenu;

import Controller.InputFromKeyboard.InputData;

import Views.Main.LoginMenu;
import Views.Main.SignUpMenu;

public class ControlMainMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1:
                LoginMenu.Menu();
                break;
            case 2:
                SignUpMenu.Menu();
                break;
            case 3:
                ForgotPassword.resetPassword();
                break;
            case 4:
                return false;
        }
        return true;
    }
}
package Controller.MainMenu;

import Controller.InputFromKeyboard.InputData;
import Model.AccessDatabase.AccessData;
import Model.AccessDatabase.DataProcessing;
import Model.Accounts.Accounts;
import Model.Accounts.AdminAccount;
import Model.Accounts.PersonnelAccount;
import Views.ProgramLog;
import Views.ProgramLogException;

public class ForgotPassword {
    public static void resetPassword(){
        String UserName = InputData.InputUserName();

        if(!setPasswordForUserAccount(UserName) && !setPasswordForPersonnelAccount(UserName)){
            setPasswordForAdminAccount(UserName);
        }
    }

    private static boolean setPasswordForUserAccount(String UserName){
        AccessData.getUserAccount();
        for(int i = 0 ; i < DataProcessing.UsersAccount.size() ; ++i){
            Accounts newAccount = new Accounts(DataProcessing.UsersAccount.get(i));
            if(CheckForUserName(newAccount, UserName)) {
                if(CheckSecurityQuestion(newAccount)){
                    DataProcessing.UsersAccount.set(i,setNewPassword(newAccount));
                    AccessData.setUserAccountToDatabase();
                    return true;
                } else {
                    System.out.println(ProgramLogException.eAnswerNotCorrect);
                    return false;
                }
            }
        }
        return false;
    }

    private static boolean setPasswordForPersonnelAccount(String UserName){
        AccessData.getPersonnelAccount();
        for(int i = 0 ; i < DataProcessing.PersonnelAccounts.size() ; ++i){
            PersonnelAccount account = new PersonnelAccount(DataProcessing.PersonnelAccounts.get(i));
            if(CheckForUserName(account, UserName)){
                if(CheckSecurityQuestion(account)){
                    DataProcessing.PersonnelAccounts.set(i,setNewPassword(account));
                    AccessData.setPersonnelAccountToDatabase();
                    return true;
                } else {
                    System.out.println(ProgramLogException.eAnswerNotCorrect);
                    return false;
                }
            }
        }
        return false;
    }

    private static void setPasswordForAdminAccount(String UserName){
        AccessData.getAdminAccount();
        for(int i = 0 ; i < DataProcessing.AdminsAccounts.size() ; ++i){
            AdminAccount account = new AdminAccount(DataProcessing.AdminsAccounts.get(i));
            if(CheckForUserName(account, UserName)){
                if(CheckSecurityQuestion(account)){
                    DataProcessing.AdminsAccounts.set(i,setNewPassword(account));
                    AccessData.setAdminAccountToDatabase();
                    return;
                } else {
                    System.out.println(ProgramLogException.eAnswerNotCorrect);
                }
                return;
            }
        }
        System.out.println(ProgramLogException.eAccountNotFound);
    }

    private static boolean CheckForUserName(Accounts account, String UserName){
        return account.getUsername().equals(UserName);
    }

    private static boolean CheckSecurityQuestion(Accounts account){
        System.out.println(ProgramLog.SecurityQuestion);
        System.out.println(account.getSecurityQuestion());
        String answer = InputData.InputSecurityAnswer();

        return account.getSecurityAnswer().equals(answer);
    }

    private static String setNewPassword(Accounts account){
        String newPassword = InputData.InputPassword();
        String lastPassword = account.getPassword();
        return account.toString().replace(lastPassword,newPassword);
    }
}
package Controller.MainMenu;

import Controller.InputFromKeyboard.InputData;
import Model.AccessDatabase.*;
import Model.Accounts.AdminAccount;
import Model.Accounts.PersonnelAccount;
import Views.Users.UserMenu;
import Views.ProgramLog;
import Views.ProgramLogException;
import Views.Admins.AdminMenu;
import Views.Personnel.PersonnelMenu;

public class Login {

    public static void LoginForm() {
        String UserName = InputData.InputUserName();
        String Password = InputData.InputPassword();

        if (!LoginWithUser(UserName, Password)) {
            if (!LoginWithPersonnel(UserName, Password)) {
                if (!LoginWithAdmin(UserName, Password)) {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
            }
        }
    }

    private static boolean LoginWithUser(String UserName, String Password) {
        AccessData.getUserAccount();
        for (String UserAccount : DataProcessing.UsersAccount) {
            if (InputData.CutStringFrom(UserAccount, 2).equals(UserName)) {
                if (InputData.CutStringFrom(UserAccount, 3).equals(Password)) {
                    UserMenu.Menu();
                } else {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
                return true;
            }
        }
        return false;
    }

    private static boolean LoginWithPersonnel(String UserName, String Password) {
        AccessData.getPersonnelAccount();
        for (String account : DataProcessing.PersonnelAccounts) {
            PersonnelAccount personnelAccount = new PersonnelAccount(account);
            if (personnelAccount.getUsername().equals(UserName)) {
                if (personnelAccount.getPassword().equals(Password)) {                    
                    if(personnelAccount.getAccountActivated()){
                        PersonnelMenu.Menu();
                    } else {
                        LoginNotSuccess(ProgramLogException.eAccountNotActivated);
                    }
                } else {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
                return true;
            }
        }
        return false;
    }

    private static boolean LoginWithAdmin(String UserName, String Password) {
        AccessData.getAdminAccount();
        for (String account : DataProcessing.AdminsAccounts) {
            AdminAccount adminAccount = new AdminAccount(account); 
            if (adminAccount.getUsername().equals(UserName)) {
                if (adminAccount.getPassword().equals(Password)) {
                    AdminMenu.Menu();
                } else {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
                return true;
            }
        }
        return false;
    }

    private static void LoginNotSuccess(String exception) {
        System.out.println(exception);
        if(InputData.ContinueOrExit()){
            LoginForm();
        }
    }
}
package Controller.MainMenu;

import Controller.InputFromKeyboard.InputData;
import Model.AccessDatabase.AccessData;
import Model.AccessDatabase.DataProcessing;
import Model.Accounts.*;
import Model.Information.AdminInformation;
import Model.Information.PersonnelInformation;
import Model.Information.UserInformation;
import Views.ProgramLog;
import Views.ProgramLogException;

public class SignUp {

    public static void ControlSignUp(int option) {
        int UserChoose = InputData.InputUserChoose(option);
        
        switch (UserChoose) {
            case 1:
                CreateUserAccount();
                break;
            case 2:
                CreatePersonnelAccount();
                break;
            case 3:
                CreateAdminAccount();
                break;
            case 4:

                break;
            default:                
            
        }
    }

    private static void CreateUserAccount() {
        UserAccount newAccount = new UserAccount();
        DataProcessing.UsersAccount.add(newAccount.toString());

        System.out.println(ProgramLog.CreateAccountSuccess);

        AccessData.getUserInformation();
        UserInformation newUserInformation = new UserInformation(Integer.parseInt(newAccount.getID()));
        DataProcessing.UserInformation.add(newUserInformation.toString());

        AccessData.setUserInformationToDatabase();
        AccessData.setUserAccountToDatabase();
    }

    private static void CreatePersonnelAccount() {
        PersonnelAccount newAccount = new PersonnelAccount();
        DataProcessing.PersonnelAccounts.add(newAccount.toString());

        
        System.out.println(ProgramLog.CreatePersonnelAccountSuccess);

        AccessData.getPersonnelInformation();
        PersonnelInformation newInformation = new PersonnelInformation(Integer.parseInt(newAccount.getID()));
        DataProcessing.PersonnelInformation.add(newInformation.toString());

        AccessData.setPersonnelInformationToDatabase();
        AccessData.setPersonnelAccountToDatabase();
    }

    private static void CreateAdminAccount() {

        if(InputData.InputAdminCode().equals("1234")){
            AdminAccount newAccount = new AdminAccount();
            DataProcessing.AdminsAccounts.add(newAccount.toString());

            System.out.println(ProgramLog.CreateAccountSuccess);

            AccessData.getAdminInformation();
            AdminInformation newAdminInformation = new AdminInformation(Integer.parseInt(newAccount.getID()));
            DataProcessing.AdminInformation.add(newAdminInformation.toString());

            AccessData.setAdminAccountToDatabase();
            AccessData.setAdminInformationToDatabase();
        } else {
            System.out.println(ProgramLogException.eAdminCodeIncorrect);
            if(InputData.ContinueOrExit()){
                CreateAdminAccount();
            }
        }

    }

}
package Controller.PersonnelMenu;

import Controller.InputFromKeyboard.InputData;

public class ControlPersonnelMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1:
                OrderManager.PrintListOrder();
                break;
            case 2:
                CheckGood.PrintListGood();
                break;
            case 3: // Your information

                break;
            case 4:
                return false;
        }
        return true;
    }
}
package Controller.UserMenu;

import Controller.InputFromKeyboard.InputData;

public class ControlUserMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1: 
                OrderManager.MakeOrder();
                break;
            case 2: 
                OrderManager.YourOrder();
                break;
            case 3: // Your Information

                break;
            case 4: // Logout
                return false;
        }
        return true;
    }

}
package Model.AccessDatabase;

import java.io.FileWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Scanner;

public class AccessData {

    public static ArrayList<String> getData(final String PathFile) {
        ArrayList<String> ListAccount = null;
        try (Scanner scFile = new Scanner(Path.of(PathFile))) {
            ListAccount = new ArrayList<>();
            while (scFile.hasNextLine()) {
                ListAccount.add(scFile.nextLine());
            }
        } catch (final Exception e) {
            System.out.println(e.toString());
        }

        return ListAccount;
    }

    private static void setData(final ArrayList<String> listData, final String PathFile) {
        try (FileWriter frFile = new FileWriter(PathFile)) {
            for (final String data : listData) {
                frFile.write(data + "\n");            
            }
        } catch (final Exception e) {
            System.out.println(e.toString());
        }
    }

    public static void getUserAccount() {
        DataProcessing.UsersAccount.clear();
        DataProcessing.UsersAccount.addAll(getData(PathFile.PathUsersAccounts));
    }

    public static void setUserAccountToDatabase() {
        setData(DataProcessing.UsersAccount, PathFile.PathUsersAccounts);
    }

    public static void getPersonnelAccount() {
        DataProcessing.PersonnelAccounts.clear();
        DataProcessing.PersonnelAccounts.addAll(getData(PathFile.PathPersonnelAccounts));
    }

    public static void setPersonnelAccountToDatabase() {
        setData(DataProcessing.PersonnelAccounts, PathFile.PathPersonnelAccounts);
    }

    public static void getAdminAccount() {
        DataProcessing.AdminsAccounts.clear();
        DataProcessing.AdminsAccounts.addAll(getData(PathFile.PathAdminsAccounts));
    }

    public static void setAdminAccountToDatabase() {
        setData(DataProcessing.AdminsAccounts, PathFile.PathAdminsAccounts);
    }

    public static void getAccountID() {
        DataProcessing.AllAccountsID.clear();
        DataProcessing.AllAccountsID.addAll(getData(PathFile.PathAllAccountsID));
    }

    public static void setAccountIDToDatabase() {
        setData(DataProcessing.AllAccountsID, PathFile.PathAllAccountsID);
    }

    public static void getUserInformation(){
        DataProcessing.UserInformation.clear();
        DataProcessing.UserInformation.addAll(getData(PathFile.PathUsersInformation));
    }

    public static void setUserInformationToDatabase(){
        setData(DataProcessing.UserInformation, PathFile.PathUsersInformation);
    }

    public static void getPersonnelInformation(){
        DataProcessing.PersonnelInformation.clear();
        DataProcessing.PersonnelInformation.addAll(getData(PathFile.PathPersonnelInformation));
    }

    public static void setPersonnelInformationToDatabase(){
        setData(DataProcessing.PersonnelInformation, PathFile.PathPersonnelInformation);
    }

    public static void getAdminInformation(){
        DataProcessing.AdminInformation.clear();
        DataProcessing.AdminInformation.addAll(getData(PathFile.PathAdminsInformation));
    }

    public static void setAdminInformationToDatabase(){
        setData(DataProcessing.AdminInformation, PathFile.PathAdminsInformation);
    }

}
package Model.AccessDatabase;

import java.util.ArrayList;

public interface DataProcessing {
    // Admin
    ArrayList<String> AdminsAccounts = new ArrayList<>();
    ArrayList<String> AdminInformation = new ArrayList<>();

    // Goods
    ArrayList<String> IDOfGoods = new ArrayList<>();

    ArrayList<String> OrdersBeingTransported = new ArrayList<>();
    ArrayList<String> OrdersDeliveryHistory = new ArrayList<>();
    ArrayList<String> OrdersForm = new ArrayList<>();
    ArrayList<String> OrdersPreparingToDelivery = new ArrayList<>();

    // Personnel
    ArrayList<String> PersonnelAccounts = new ArrayList<>();
    ArrayList<String> PersonnelInformation = new ArrayList<>();

    // Users
    ArrayList<String> UsersAccount = new ArrayList<>();
    ArrayList<String> UserInformation = new ArrayList<>();

    //
    ArrayList<String> AllAccountsID = new ArrayList<>();
}
package Model.AccessDatabase;

public interface PathFile {
    // Admin
    public final String PathAdminsAccounts = "Database\\Admins\\Accounts.txt";
    public final String PathAdminsInformation = "Database\\Admins\\Information.txt";

    // Goods
    public final String PathListIDOfGoods = "Database\\Goods\\List Of Goods\\ListIDOfGoods.txt";

    public final String PathOrderBeingTransported = "Database\\Goods\\Orders\\BeingTransported.txt";
    public final String PathDeliveryHistory = "Database\\Goods\\Orders\\ListOrders.txt";
    public final String PathOrderForm = "Database\\Goods\\Orders\\OrderForm.txt";
    public final String PathPreparingToDelivery = "Database\\Goods\\Orders\\PreparingToDelivery.txt";

    // Personnel
    public final String PathPersonnelAccounts = "Database\\Personnel\\Accounts.txt";    
    public final String PathPersonnelInformation = "Database\\Personnel\\Information.txt";

    // Users
    public final String PathUsersAccounts = "Database\\Users\\Accounts.txt";
    public final String PathUsersInformation = "Database\\Users\\Information.txt";

    //
    public final String PathAllAccountsID = "Database\\AllAccountsID.txt";
}
package Model.Accounts;

import Controller.InputFromKeyboard.InputData;
import Model.AccessD