package Controllers.AdminMenu;

import Controllers.InputFromKeyboard.InputData;
import Views.Admins.GoodsManagerMenu;
import Views.Admins.PersonnelManagementMenu;

public class ControlAdminMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1: 
                GoodsManagerMenu.Menu();
                break;
            case 2: 
                PersonnelManagementMenu.Menu();
                break;
            case 3: // Your information

                break;
            case 4:
                return false;
        }
        return true;
    }
}
package Controllers.AdminMenu;

import Controllers.InputFromKeyboard.InputData;

public class ControlGoodManager {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);
        switch (UserInput) {
            case 1: // print list item
                GoodManager.PrintListGood();
                return true;
            case 2: // add item
                GoodManager.AddGood();
                return true;
            case 3: // remove item
                GoodManager.RemoveGood();
                return true;
            case 4: // edit item
                GoodManager.EditGood();
                return true;
            case 5: // back
                break;
        }

        return false;
    }

}
package Controllers.AdminMenu;

import Controllers.InputFromKeyboard.InputData;


public class ControlPersonnelManager {
    
    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);
        switch (UserInput) {
            case 1: 
                PersonnelManager.AcceptPersonnelAccount();                
                return true;
            case 2: 
                PersonnelManager.StatisticsWorkingTime();
                return true;
            case 3:
                PersonnelManager.RemovePersonnelAccount();
                return true;
            case 4: // Back
                break;
        }
        return false;
    }
}
package Controllers.AdminMenu;

import Controllers.PersonnelMenu.CheckGood;

public class GoodManager {
        
    public static void PrintListGood(){
        CheckGood.PrintListGood();
    }
    public static void AddGood(){

    }
    public static void RemoveGood(){

    }
    public static void EditGood(){
        
    }
}
package Controllers.AdminMenu;

public class PersonnelManager {
    public static void AcceptPersonnelAccount(){

    }
    // Thống kê thời gian làm việc
    public static void StatisticsWorkingTime(){

    }
    public static void RemovePersonnelAccount(){
        
    }

}
package Controllers.InputFromKeyboard;

import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Views.ProgramLog;
import Views.ProgramLogException;

public class InputData implements LibraryInputData, ProgramLogException, ProgramLog {

    public static int InputUserChoose(int NumberOfOptions) {
        System.out.print(inputChooseNotify);
        String yourChoose = sc.nextLine();
        try {
            int numberOfChoose = Integer.parseInt(yourChoose);
            if (numberOfChoose < 0 || numberOfChoose > NumberOfOptions) {
                System.out.println(eUserChooseLength + "\n");
                return InputUserChoose(NumberOfOptions);
            }

            System.out.println();
            return numberOfChoose;
        } catch (NumberFormatException e) {
            System.out.println(eUserChooseNotNumber);
        }
        System.out.println();
        return InputUserChoose(NumberOfOptions);
    }

    // UserName is mobile number
    public static String InputUserName() {
        System.out.print(inputUserName);
        String UserName = sc.nextLine();
        if (CheckStringAllIsNumber(UserName)) {
            if (UserName.length() == 10) {
                return UserName;
            } else {
                System.out.println(eLengthMobilNumber);
                return InputUserName();
            }
        } else {
            System.out.println(eUserNameIsNumber);
            return InputUserName();
        }
    }

    // Password is letter and number
    public static String InputPassword() {
        System.out.print(inputPassword);
        String Password = sc.nextLine();
        if (CheckStringIsNumberAndLetter(Password)) {
            if (Password.length() >= 6 && Password.length() <= 12) {
                return Password;
            } else {
                System.out.println(ePasswordLength);
                return InputPassword();
            }
        } else {
            System.out.println(ePasswordIsNumberAndLetter);
            return InputPassword();
        }
    }

    public static String InputSecurityQuestion() {

        System.out.println(SecurityQuestion);
        System.out.println("(1)" + SecurityQuestion1);
        System.out.println("(2)" + SecurityQuestion2);
        System.out.println("(3)" + SecurityQuestion3);

        switch (InputUserChoose(3)) {
            case 1:
                return SecurityQuestion1;
            case 2:
                return SecurityQuestion2;
            case 3:
                return SecurityQuestion3;
        }
        return "";
    }

    public static String InputSecurityAnswer() {
        System.out.print(inputSecurityAnswer);
        String answer = sc.nextLine();
        if (CheckStringAllIsLetter(answer)) {
            return answer;
        } else {
            System.out.println(eStringAllNotLetter);
            return InputSecurityQuestion();
        }
    }

    public static String InputAdminCode() {
        System.out.print(inputAdminCode);
        String AdminCode = sc.nextLine();
        if (CheckStringAllIsNumber(AdminCode)) {
            return AdminCode;
        } else {
            System.out.println(eAdminCode);
            return InputAdminCode();
        }
    }

    public static String InputInfoName() {
        System.out.print(inputInfoName);
        String name = sc.nextLine();
        if (CheckStringAllIsLetter(name)) {
            return name;
        } else {
            System.out.println(eInputInfoName);
            return InputInfoName();
        }
    }

    public static String InputInfoAge() {
        System.out.print(inputInfoAge);
        String age = sc.nextLine();
        if (CheckStringAllIsNumber(age)) {
            return age;
        } else {
            System.out.println(eInputInfoAge);
            return InputInfoAge();
        }
    }

    public static String InputInfoAddress() {
        System.out.print(inputInfoAddress);
        String address = sc.nextLine();
        if (CheckAddress(address)) {
            return address;
        } else {
            System.out.println(eInputInfoAddress);
            return InputInfoAddress();
        }
    }


    public static String InputIDItemForUser(){
        System.out.print(inputIDItem);
        return sc.nextLine();        
    }

    public static String InputNameItem(){
        System.out.print(inputNameItem);
        String nameItem = sc.nextLine();
        if(CheckStringIsNumberAndLetter(nameItem)){
            return nameItem;
        } else {
            System.out.println(eNameItemNotCorrect);
            return InputNameItem();
        }
    }
    public static String InputAmountItem(){
        System.out.print(inputAmountItem);
        String amountItem = sc.nextLine();
        if(CheckStringAllIsNumber(amountItem)){
            return amountItem;
        } else {
            System.out.println(eAmountItemNotCorrect);
            return InputAmountItem();
        }
    }
    public static String InputPriceItem(){
        System.out.print(inputPriceItem);
        String priceItem = sc.nextLine();
        if(CheckPriceItem(priceItem)){
            return priceItem;
        } else {
            System.out.println(ePriceItemNotCorrect);
            return InputPriceItem();
        }
    }
    private static boolean CheckPriceItem(String priceItem){
        try{
            Double.parseDouble(priceItem);
            return true;
        } catch (NumberFormatException e){
            return false;
        }
    }

    public static boolean ContinueOrExit() {
        System.out.println(ContinueOrExitMenu);
        switch (InputUserChoose(2)) {
            case 1:
                return true;
            case 2:
                return false;
        }
        return false;
    }

    public static boolean CheckAddress(String address) {
        address = address.replaceAll(" ", "");
        address = address.replaceAll("-", "");
        return CheckStringIsNumberAndLetter(address);
    }

    public static boolean CheckStringAllIsLetter(String StringNeedCheck) {
        for (int i = 0; i < StringNeedCheck.length(); ++i) {
            if (!Character.isLetter(StringNeedCheck.charAt(i)) && StringNeedCheck.charAt(i) != ' ') {
                return false;
            }
        }
        return true;
    }

    public static boolean CheckStringAllIsNumber(String StringNeedCheck) {
        final String StringForm = "0123456789";
        for (int i = 0; i < StringNeedCheck.length(); ++i) {
            if (!StringForm.contains(String.valueOf(StringNeedCheck.charAt(i)))) {
                return false;
            }
        }
        return true;
    }

    public static boolean CheckStringIsNumberAndLetter(String StringNeedCheck) {
        final String StringForm = "qwertyuioplkjhgfdsazxcvbnm0123456789QWERTYUIOPLKJHGFDSAZXCVBNM";
        for (int i = 0; i < StringNeedCheck.length(); ++i) {
            if (!StringForm.contains(String.valueOf(StringNeedCheck.charAt(i)))) {
                return false;
            }
        }
        return true;
    }

    public static boolean CheckUserNameIsOnly(String Username) {
        AccessData.getUserAccount();
        AccessData.getPersonnelAccount();
        AccessData.getAdminAccount();
        for (String account : DataProcessing.UsersAccount) {
            if (InputData.CutStringFrom(account, 2).equals(Username)) {
                return false;
            }
        }
        for (String account : DataProcessing.PersonnelAccounts) {
            if (InputData.CutStringFrom(account, 2).equals(Username)) {
                return false;
            }
        }
        for (String account : DataProcessing.AdminsAccounts) {
            if (InputData.CutStringFrom(account, 2).equals(Username)) {
                return false;
            }
        }

        return true;
    }

    public static String CutStringFrom(String StringNeedCut, int Start) {
        // Datatype is "|...|...|" so start is number of "|"
        for(int i = 0; i < Start ; ++i){
            StringNeedCut = StringNeedCut.substring(StringNeedCut.indexOf("|") + 1);
        }
        return StringNeedCut.substring(0, StringNeedCut.indexOf("|"));
    }

}
package Controllers.InputFromKeyboard;

import java.util.Scanner;

public interface LibraryInputData {
    Scanner sc = new Scanner(System.in);
}
package Controllers.MainMenu;

import Controllers.InputFromKeyboard.InputData;
import Views.Main.LoginMenu;
import Views.Main.SignUpMenu;

public class ControlMainMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1:
                LoginMenu.Menu();
                break;
            case 2:
                SignUpMenu.Menu();
                break;
            case 3:
                ForgotPassword.resetPassword();
                break;
            case 4:
                return false;
        }
        return true;
    }
}
package Controllers.MainMenu;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Models.Accounts.Accounts;
import Models.Accounts.AdminAccount;
import Models.Accounts.PersonnelAccount;
import Views.ProgramLog;
import Views.ProgramLogException;

public class ForgotPassword {
    public static void resetPassword(){
        String UserName = InputData.InputUserName();

        if(!setPasswordForUserAccount(UserName) && !setPasswordForPersonnelAccount(UserName)){
            setPasswordForAdminAccount(UserName);
        }
    }

    private static boolean setPasswordForUserAccount(String UserName){
        AccessData.getUserAccount();
        for(int i = 0 ; i < DataProcessing.UsersAccount.size() ; ++i){
            Accounts newAccount = new Accounts(DataProcessing.UsersAccount.get(i));
            if(CheckForUserName(newAccount, UserName)) {
                if(CheckSecurityQuestion(newAccount)){
                    DataProcessing.UsersAccount.set(i,setNewPassword(newAccount));
                    AccessData.setUserAccountToDatabase();
                    return true;
                } else {
                    System.out.println(ProgramLogException.eAnswerNotCorrect);
                    return false;
                }
            }
        }
        return false;
    } 

    private static boolean setPasswordForPersonnelAccount(String UserName){
        AccessData.getPersonnelAccount();
        for(int i = 0 ; i < DataProcessing.PersonnelAccounts.size() ; ++i){
            PersonnelAccount account = new PersonnelAccount(DataProcessing.PersonnelAccounts.get(i));
            if(CheckForUserName(account, UserName)){
                if(CheckSecurityQuestion(account)){
                    DataProcessing.PersonnelAccounts.set(i,setNewPassword(account));
                    AccessData.setPersonnelAccountToDatabase();
                    return true;
                } else {
                    System.out.println(ProgramLogException.eAnswerNotCorrect);
                    return false;
                }
            }
        }
        return false;
    }

    private static void setPasswordForAdminAccount(String UserName){
        AccessData.getAdminAccount();
        for(int i = 0 ; i < DataProcessing.AdminsAccounts.size() ; ++i){
            AdminAccount account = new AdminAccount(DataProcessing.AdminsAccounts.get(i));
            if(CheckForUserName(account, UserName)){
                if(CheckSecurityQuestion(account)){
                    DataProcessing.AdminsAccounts.set(i,setNewPassword(account));
                    AccessData.setAdminAccountToDatabase();
                    return;
                } else {
                    System.out.println(ProgramLogException.eAnswerNotCorrect);
                }
                return;
            }
        }
        System.out.println(ProgramLogException.eAccountNotFound);
    }

    private static boolean CheckForUserName(Accounts account, String UserName){
        return account.getUsername().equals(UserName);
    }

    private static boolean CheckSecurityQuestion(Accounts account){
        System.out.println(ProgramLog.SecurityQuestion);
        System.out.println(account.getSecurityQuestion());
        String answer = InputData.InputSecurityAnswer();

        return account.getSecurityAnswer().equals(answer);
    }

    private static String setNewPassword(Accounts account){
        String newPassword = InputData.InputPassword();
        String lastPassword = account.getPassword();
        return account.toString().replace(lastPassword,newPassword);
    }
}
package Controllers.MainMenu;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.*;
import Models.Accounts.AdminAccount;
import Models.Accounts.PersonnelAccount;
import Views.Users.UserMenu;
import Views.ProgramLog;
import Views.ProgramLogException;
import Views.Admins.AdminMenu;
import Views.Personnel.PersonnelMenu;

public class Login {

    public static void LoginForm() {
        String UserName = InputData.InputUserName();
        String Password = InputData.InputPassword();

        if (!LoginWithUser(UserName, Password)) {
            if (!LoginWithPersonnel(UserName, Password)) {
                if (!LoginWithAdmin(UserName, Password)) {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
            }
        }
    }

    private static boolean LoginWithUser(String UserName, String Password) {
        AccessData.getUserAccount();
        for (String UserAccount : DataProcessing.UsersAccount) {
            if (InputData.CutStringFrom(UserAccount, 2).equals(UserName)) {
                if (InputData.CutStringFrom(UserAccount, 3).equals(Password)) {
                    UserMenu.Menu(InputData.CutStringFrom(UserAccount, 1));
                } else {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
                return true;
            }
        }
        return false;
    }

    private static boolean LoginWithPersonnel(String UserName, String Password) {
        AccessData.getPersonnelAccount();
        for (String account : DataProcessing.PersonnelAccounts) {
            PersonnelAccount personnelAccount = new PersonnelAccount(account);
            if (personnelAccount.getUsername().equals(UserName)) {
                if (personnelAccount.getPassword().equals(Password)) {                    
                    if(personnelAccount.getAccountActivated()){
                        PersonnelMenu.Menu();
                    } else {
                        LoginNotSuccess(ProgramLogException.eAccountNotActivated);
                    }
                } else {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
                return true;
            }
        }
        return false;
    }

    private static boolean LoginWithAdmin(String UserName, String Password) {
        AccessData.getAdminAccount();
        for (String account : DataProcessing.AdminsAccounts) {
            AdminAccount adminAccount = new AdminAccount(account); 
            if (adminAccount.getUsername().equals(UserName)) {
                if (adminAccount.getPassword().equals(Password)) {
                    AdminMenu.Menu();
                } else {
                    LoginNotSuccess(ProgramLog.LoginNotSuccess);
                }
                return true;
            }
        }
        return false;
    }

    private static void LoginNotSuccess(String exception) {
        System.out.println(exception);
        if(InputData.ContinueOrExit()){
            LoginForm();
        }
    }
}
package Controllers.MainMenu;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Models.Accounts.*;
import Models.Information.AdminInformation;
import Models.Information.PersonnelInformation;
import Models.Information.UserInformation;
import Views.ProgramLog;
import Views.ProgramLogException;

public class SignUp {

    public static void ControlSignUp(int option) {
        int UserChoose = InputData.InputUserChoose(option);
        
        switch (UserChoose) {
            case 1:
                CreateUserAccount();
                break;
            case 2:
                CreatePersonnelAccount();
                break;
            case 3:
                CreateAdminAccount();
                break;
            case 4:

                break;
            default:                
            
        }
    }

    private static void CreateUserAccount() {
        UserAccount newAccount = new UserAccount();
        DataProcessing.UsersAccount.add(newAccount.toString());

        System.out.println(ProgramLog.CreateAccountSuccess);

        AccessData.getUserInformation();
        UserInformation newUserInformation = new UserInformation(Integer.parseInt(newAccount.getID()));
        DataProcessing.UserInformation.add(newUserInformation.toString());

        AccessData.setUserInformationToDatabase();
        AccessData.setUserAccountToDatabase();
    }

    private static void CreatePersonnelAccount() {
        PersonnelAccount newAccount = new PersonnelAccount();
        DataProcessing.PersonnelAccounts.add(newAccount.toString());

        
        System.out.println(ProgramLog.CreatePersonnelAccountSuccess);

        AccessData.getPersonnelInformation();
        PersonnelInformation newInformation = new PersonnelInformation(Integer.parseInt(newAccount.getID()));
        DataProcessing.PersonnelInformation.add(newInformation.toString());

        AccessData.setPersonnelInformationToDatabase();
        AccessData.setPersonnelAccountToDatabase();
    }

    private static void CreateAdminAccount() {

        if(InputData.InputAdminCode().equals("1234")){
            AdminAccount newAccount = new AdminAccount();
            DataProcessing.AdminsAccounts.add(newAccount.toString());

            System.out.println(ProgramLog.CreateAccountSuccess);

            AccessData.getAdminInformation();
            AdminInformation newAdminInformation = new AdminInformation(Integer.parseInt(newAccount.getID()));
            DataProcessing.AdminInformation.add(newAdminInformation.toString());

            AccessData.setAdminAccountToDatabase();
            AccessData.setAdminInformationToDatabase();
        } else {
            System.out.println(ProgramLogException.eAdminCodeIncorrect);
            if(InputData.ContinueOrExit()){
                CreateAdminAccount();
            }
        }

    }

}
package Controllers.PersonnelMenu;

public class CheckGood {
    
    // In ra danh sach hang va so luong cua chung
    public static void PrintListGood(){

    }
}
package Controllers.PersonnelMenu;

import Controllers.InputFromKeyboard.InputData;

public class ControlOrderManager {
    public static boolean SelectOption(int option) {

        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1:
                
                return true;
            case 2:
                return true;
            case 3:
                break;
        }
        return false;
    }
}
package Controllers.PersonnelMenu;

import Controllers.InputFromKeyboard.InputData;

public class ControlPersonnelMenu {

    public static boolean SelectOption(int option) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1:
                OrderManager.PrintListOrder();
                break;
            case 2:
                CheckGood.PrintListGood();
                break;
            case 3: // Your information

                break;
            case 4:
                return false;
        }
        return true;
    }
}
package Controllers.PersonnelMenu;

public class OrderManager {
    public static void PrintListOrder(){
        // in ra ID don hang,ID nguoi nhan, cac loai hang va noi nhan
    }
    
    public static void UpdateOrderStatus(){
        
    }
}
package Controllers.UserMenu;

import Controllers.InputFromKeyboard.InputData;

public class ControlUserMenu {

    public static boolean SelectOption(int option , String IDUSer) {
        int UserInput = InputData.InputUserChoose(option);

        switch (UserInput) {
            case 1: 
                OrderManager.MakeOrder(IDUSer);
                break;
            case 2: 
                OrderManager.YourOrder(IDUSer);
                break;
            case 3: // Your Information
                
                break;
            case 4: // Logout
                return false;
        }
        return true;
    }

}
package Controllers.UserMenu;

import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Models.Goods.Item;
import Models.Goods.Order;


public class OrderManager {

    private static void printAllItem(){
        AccessData.getAllItem();
        System.out.printf("%1$-8s%2$-15s%3$-13s%4$-10s\n","ID","Name","Amount","Price");
        for(String stringItem : DataProcessing.AllItem){
            Item item = new Item(stringItem);
            item.printItemForUser();
        }
    }

    public static void MakeOrder(String IDUser) {
        printAllItem();
        Order newOrder = new Order(Integer.parseInt(IDUser));
        if(newOrder.CheckOrderSuccess()) {
            DataProcessing.AllOrder.add(newOrder.toString());
            AccessData.setAllOrderToDatabase();
        }
    }

    public static void YourOrder(String IDUser){
        AccessData.getAllOrder();
        for(String orderInList : DataProcessing.AllOrder){
            Order OrderInDatabase = new Order(orderInList);
            if(IDUser.equals(OrderInDatabase.getIDUser())){
                OrderInDatabase.printOrder();
            }
        }
    }
}
package Models.AccessDatabase;

import java.io.FileWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Scanner;

public class AccessData {

    private static ArrayList<String> getData(final String PathFile) {
        ArrayList<String> ListOfData = null;
        try (Scanner scFile = new Scanner(Path.of(PathFile))) {
            ListOfData = new ArrayList<>();
            while (scFile.hasNextLine()) {
                ListOfData.add(scFile.nextLine());
            }
        } catch (final Exception e) {
            System.out.println(e.toString());
        }
        return ListOfData;
    }

    private static void setData(final ArrayList<String> listData, final String PathFile) {
        try (FileWriter frFile = new FileWriter(PathFile)) {
            for (final String data : listData) {
                frFile.write(data + "\n");            
            }
        } catch (final Exception e) {
            System.out.println(e.toString());
        }
    }

    public static void getUserAccount() {
        DataProcessing.UsersAccount.clear();
        DataProcessing.UsersAccount.addAll(getData(PathFile.PathUsersAccounts));
    }
    public static void setUserAccountToDatabase() {
        setData(DataProcessing.UsersAccount, PathFile.PathUsersAccounts);
    }

    public static void getPersonnelAccount() {
        DataProcessing.PersonnelAccounts.clear();
        DataProcessing.PersonnelAccounts.addAll(getData(PathFile.PathPersonnelAccounts));
    }

    public static void setPersonnelAccountToDatabase() {
        setData(DataProcessing.PersonnelAccounts, PathFile.PathPersonnelAccounts);
    }

    public static void getAdminAccount() {
        DataProcessing.AdminsAccounts.clear();
        DataProcessing.AdminsAccounts.addAll(getData(PathFile.PathAdminsAccounts));
    }

    public static void setAdminAccountToDatabase() {
        setData(DataProcessing.AdminsAccounts, PathFile.PathAdminsAccounts);
    }

    public static void getAccountID() {
        DataProcessing.AllAccountsID.clear();
        DataProcessing.AllAccountsID.addAll(getData(PathFile.PathAllAccountsID));
    }

    public static void setAccountIDToDatabase() {
        setData(DataProcessing.AllAccountsID, PathFile.PathAllAccountsID);
    }

    public static void getUserInformation(){
        DataProcessing.UserInformation.clear();
        DataProcessing.UserInformation.addAll(getData(PathFile.PathUsersInformation));
    }

    public static void setUserInformationToDatabase(){
        setData(DataProcessing.UserInformation, PathFile.PathUsersInformation);
    }

    public static void getPersonnelInformation(){
        DataProcessing.PersonnelInformation.clear();
        DataProcessing.PersonnelInformation.addAll(getData(PathFile.PathPersonnelInformation));
    }

    public static void setPersonnelInformationToDatabase(){
        setData(DataProcessing.PersonnelInformation, PathFile.PathPersonnelInformation);
    }

    public static void getAdminInformation(){
        DataProcessing.AdminInformation.clear();
        DataProcessing.AdminInformation.addAll(getData(PathFile.PathAdminsInformation));
    }

    public static void setAdminInformationToDatabase(){
        setData(DataProcessing.AdminInformation, PathFile.PathAdminsInformation);
    }

    public static void getAllOrder(){
        DataProcessing.AllOrder.clear();
        DataProcessing.AllOrder.addAll(getData(PathFile.PathOrder));
    }

    public static void setAllOrderToDatabase(){
        setData(DataProcessing.AllOrder, PathFile.PathOrder);
    }

    public static void getAllItem(){
        DataProcessing.AllItem.clear();
        DataProcessing.AllItem.addAll(getData(PathFile.PathItem));
    }

    public static void setAllItem(){
        setData(DataProcessing.AllItem, PathFile.PathItem);
    }

}
package Models.AccessDatabase;

import java.util.ArrayList;

public interface DataProcessing {
    // Admin
    ArrayList<String> AdminsAccounts = new ArrayList<>();
    ArrayList<String> AdminInformation = new ArrayList<>();

    // Warehouse
    ArrayList<String> AllItem = new ArrayList<>();

    // Personnel
    ArrayList<String> PersonnelAccounts = new ArrayList<>();
    ArrayList<String> PersonnelInformation = new ArrayList<>();

    // Users
    ArrayList<String> UsersAccount = new ArrayList<>();
    ArrayList<String> UserInformation = new ArrayList<>();
    ArrayList<String> AllOrder = new ArrayList<>();

    //
    ArrayList<String> AllAccountsID = new ArrayList<>();
}
package Models.AccessDatabase;

public interface PathFile {
    // Admin
    String PathAdminsAccounts = "Database\\Admins\\Accounts.txt";
    String PathAdminsInformation = "Database\\Admins\\Information.txt";

    // Personnel
    String PathPersonnelAccounts = "Database\\Personnel\\Accounts.txt";
    String PathPersonnelInformation = "Database\\Personnel\\Information.txt";

    // Users
    String PathUsersAccounts = "Database\\Users\\Accounts.txt";
    String PathUsersInformation = "Database\\Users\\Information.txt";
    String PathOrder = "Database\\Users\\Order.txt";

    //Warehouse
    String PathItem = "Database\\Warehouse\\Item.txt";

    //
    String PathAllAccountsID = "Database\\AllAccountsID.txt";
}
package Models.Accounts;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Views.ProgramLogException;

public class Accounts {
    private String ID;
    private String Username;
    private String Password;
    private String SecurityQuestion;
    private String SecurityAnswer;

    public Accounts() {
        setID();
        setUsername();
        setPassword();
        setSecurityQuestion();
        setSecurityAnswer();
    }

    public Accounts(String newAccount){
        setID(newAccount);
        setUsername(newAccount);
        setPassword(newAccount);
        setSecurityQuestion(newAccount);
        setSecurityAnswer(newAccount);            
    }    

    public String getID() {
        return ID;
    }

    public String getUsername() {
        return Username;
    }

    public String getPassword() {
        return Password;
    }

    public String getSecurityQuestion() {
        return SecurityQuestion;
    }

    public String getSecurityAnswer() {
        return SecurityAnswer;
    }

    public void setID() {
        AccessData.getAccountID();
        if (DataProcessing.AllAccountsID.isEmpty()) {
            this.ID = "0";
        } else {
            String lastID = DataProcessing.AllAccountsID.get(DataProcessing.AllAccountsID.size() - 1);
            this.ID = String.valueOf(Integer.parseInt(lastID)+ 1);
        }

        DataProcessing.AllAccountsID.add(ID);
        AccessData.setAccountIDToDatabase();
    }

    public void setID(String newAccount){
        this.ID = InputData.CutStringFrom(newAccount, 1);
    }

    public void setUsername() {        
        String Username = InputData.InputUserName();
        if(InputData.CheckUserNameIsOnly(Username)){
            this.Username = Username;
        } else {
            System.out.println(ProgramLogException.eUserNameDelicate);
            setUsername();
        }
    }

    public void setUsername(String newAccount){
        this.Username = InputData.CutStringFrom(newAccount, 2);
    }

    public void setPassword() {
        Password = InputData.InputPassword();
    }

    public void setPassword(String newAccount){

        this.Password = InputData.CutStringFrom(newAccount, 3);
    }

    public void setSecurityQuestion() {
        
        this.SecurityQuestion = InputData.InputSecurityQuestion();
    }

    public void setSecurityQuestion(String newAccount){
        this.SecurityQuestion = InputData.CutStringFrom(newAccount, 4);
    }

    public void setSecurityAnswer() {
        this.SecurityAnswer = InputData.InputSecurityAnswer();
    }

    public void setSecurityAnswer(String newAccount){
        this.SecurityAnswer = InputData.CutStringFrom(newAccount, 5);
    }

    public String toString() {
        return "|" + getID() + "|" + getUsername() + "|" + getPassword() + "|" + getSecurityQuestion() + "|"
                + getSecurityAnswer() + "|";
    }

}
package Models.Accounts;

public class AdminAccount extends Accounts {

    public AdminAccount() {
        super();
    }
    public AdminAccount(String newAccount){
        super(newAccount);
    }
}
package Models.Accounts;

public class PersonnelAccount extends Accounts {

    private boolean AccountActivated = false;

    public PersonnelAccount() {
        super();
    }

    public PersonnelAccount(String newAccount){
        super(newAccount);
    }

    public void setAccountActivated(){
        AccountActivated = true;
    }

    public boolean getAccountActivated(){
        return AccountActivated;
    }

    @Override
    public String toString(){
        return super.toString() + AccountActivated + "|";
    }
}
package Models.Accounts;

public class UserAccount extends Accounts {

    public UserAccount() {
        super();
    }

    public UserAccount(String newAccount){
        super(newAccount);
    }
}
package Models.Goods;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;

public class Item {

    private String ID;
    private String Name;
    private String Amount;
    private String Price;

    public Item(){
        setID();
        setName();
        setAmount();
        setPrice();
    }

    public Item(String item){
        setID(item);
        setName(item);
        setAmount(item);
        setPrice(item);
    }

    public void setID() {
        AccessData.getAllItem();
        String lastItem = DataProcessing.AllItem.get(DataProcessing.AllItem.size() - 1);
        int lastID = Integer.parseInt(InputData.CutStringFrom(lastItem,1));
        this.ID = String.valueOf(lastID + 1);
    }

    private void setID(String item){
        this.ID = InputData.CutStringFrom(item,1);
    }

    private void setName() {
        this.Name = InputData.InputNameItem();
    }

    private void setName(String item) {
        this.Name = InputData.CutStringFrom(item,2);
    }

    private void setAmount() {
        this.Amount = InputData.InputAmountItem();
    }

    private void setAmount(String item) {
        this.Amount = InputData.CutStringFrom(item,3);
    }

    public void setAmount(int amount){
        this.Amount = String.valueOf(amount);
    }

    private void setPrice() {
        this.Price = InputData.InputPriceItem();
    }

    private void setPrice(String item) {
        this.Price = InputData.CutStringFrom(item,4);
    }

    public String getID() {
        return ID;
    }

    public String getName() {
        return Name;
    }

    public String getAmount() {
        return Amount;
    }

    public String getPrice() {
        return Price;
    }

    public String toString(){
        return "|" + getID() +"|" + getName() + "|" + getAmount() + "|" + getPrice() + "|";
    }

    public void printItemForUser() {
        //"%1$-8s%2$-15s%3$-13s%4$-20s\n" - This is format line when print
        if(Integer.parseInt(getAmount()) > 0){
            System.out.printf("%1$-8s%2$-15s%3$-13s%4$-20s\n",getID(),getName(),"Stoking",getPrice());
        } else {
            System.out.printf("%1s%12s%12s%12s\n",getID(),getName(),"Out of stock",getPrice());
        }
    }

    public void printItemForManager(){
        System.out.printf("%1s%12s%12s%12s\n",getID(),getName(),getAmount(),getPrice());
    }

}
package Models.Goods;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Views.ProgramLogException;

public class ItemUserBuy {
    
    private String IDItem;
    private String NameItem;
    private String AmountItem;
    private boolean Status = true;

    public ItemUserBuy() {
        setIDItem();
        setNameItem(SearchItemWithID(this.IDItem));
        setAmountItem(SearchItemWithID(this.IDItem));
    }

    public ItemUserBuy(String item){
        setNameItem(item);
        setAmountItem(item);
    }

    public Item SearchItemWithID(String IDItem){
        for(String StringItem : DataProcessing.AllItem){
            Item item = new Item(StringItem);
            if(item.getID().equals(IDItem)) {
                return item;
            }
        }
        return null;
    }

    public void setIDItem() {
        String id = InputData.InputIDItemForUser();
        this.IDItem = SearchItemWithID(id).getID();
        if(this.IDItem == null) {
            System.out.println(ProgramLogException.eIDItemNotFound);
            Status = false;
        }
    }

    public void setNameItem(Item item) {
        this.NameItem = item.getName();
    }

    public void setNameItem(String item){
        this.NameItem = InputData.CutStringFrom(item,1);
    }

    public void setAmountItem(Item item) {        
        String amountItem = InputData.InputAmountItem();
        
        if(Integer.parseInt(amountItem) <= Integer.parseInt(item.getAmount())) {
            this.AmountItem = amountItem;
            upDateAmountItem(item , amountItem);
        } else {
            System.out.println(ProgramLogException.eAmountItemTooMuch);            
            Status = false;
        }
    }
    public void setAmountItem(String item){
        this.AmountItem = InputData.CutStringFrom(item,2);
    }

    public void upDateAmountItem(Item item , String amountItem){
        DataProcessing.AllItem.remove(item.toString());
        item.setAmount(Integer.parseInt(item.getAmount()) - Integer.parseInt(amountItem));
        DataProcessing.AllItem.add(item.toString());            
        AccessData.setAllItem();
    }

//    public String getIDItem() {
//        return IDItem;
//    }

    public String getNameItem() {
        return NameItem;
    }
    public String getAmountItem() {
        return AmountItem;
    }
    public Boolean getStatus(){
        return Status;
    }

    public String toString(){
        return getNameItem() + "|" + getAmountItem() + "|";
    }

    public void printItemUserBuy() {
//        System.out.printf("%1s%12s\n",getNameItem(),getAmountItem());
        System.out.println(getNameItem() + "   " + getAmountItem());
    }
}
package Models.Goods;

import Controllers.InputFromKeyboard.InputData;
import Models.AccessDatabase.AccessData;
import Models.AccessDatabase.DataProcessing;
import Views.ProgramLog;
import Views.ProgramLogException;

import java.util.ArrayList;

public class Order {
    
    private String IDOrder;
    private String IDUser;
    private String Status = "";
    private final ArrayList<String> order = new ArrayList<>();

    public Order(int IDUser){        
        setIDOrder();
        setItemToOrder();
        setIDUser(IDUser);
    }

    public Order(String order){
        setIDOrder(order);
        setItemToOrder(order);
        setIDUser(order);
    }

    public void setIDUser(int IDUser){
        this.IDUser = String.valueOf(IDUser);
    }

    public void setIDUser(String order){
        this.IDUser =  InputData.CutStringFrom(order,2);
    }

    public String getIDUser(){
        return this.IDUser;
    }

    public void setItemToOrder(){
        do {
            ItemUserBuy newItem = new ItemUserBuy();
            if(newItem.getStatus()){
                order.add(newItem.toString());
                Status = "Preparing goods";
                System.out.println(ProgramLog.BuyItemSuccess);
            } else {
                System.out.println(ProgramLogException.eBuyItemNotSuccess);
                Status = "False";
            }
        } while(InputData.ContinueOrExit());   
    }

    public void setItemToOrder(String order){
        int AmountOfItem = 0;
        for(int i = 0 ; i < order.length() -1 ; ++i){
            if(order.startsWith("|", i)){
                ++AmountOfItem;
            }
        }

        for(int i = 3 ; i < AmountOfItem ; ++i) {
            this.order.add("|" + InputData.CutStringFrom(order,i) + "|" + InputData.CutStringFrom(order, i + 1) + "|");
        }
    }

    public void setIDOrder() {
        AccessData.getAllOrder();
        String lastOrder = DataProcessing.AllOrder.get(DataProcessing.AllOrder.size() - 1);
        int lastID = Integer.parseInt(InputData.CutStringFrom(lastOrder,1));
        this.IDOrder = String.valueOf(lastID + 1);
    }

    public void setIDOrder(String order){
        this.IDOrder = InputData.CutStringFrom(order,1);
    }

    public String getIDOrder() {
        return IDOrder;
    }

    public String toString() {
        StringBuilder listItem = new StringBuilder();
        for(String item : order){
            listItem.append(item);
        }        
        return "|" + getIDOrder() + "|" + IDUser + "|" + listItem.toString();
    }

    public void printOrder(){
        for(String item : order) {
            ItemUserBuy ItemInListOrder = new ItemUserBuy(item);
            ItemInListOrder.printItemUserBuy();
        }
    }

    public boolean CheckOrderSuccess(){
        return !Status.equals("False");
    }
}
package Models.Information;

public class AdminInformation extends Information {
    
    public AdminInformation(int ID){
        super(ID);
    }

    public AdminInformation(String info){
        super(info);
    }
}
package Models.Information;

import Controllers.InputFromKeyboard.InputData;

public class Information {

    private String ID;
    private String Name;
    private String Age;
    private String Address;

    public Information(int ID){
        setID(ID);
        setName();
        setAge();
        setAddress();
    }

    public Information(String info){
        setName(info);
        setAge(info);
        setAddress(info);
    }

    public void setID(int ID){
        this.ID = String.valueOf(ID);
    }

    public void setName() {
        Name = InputData.InputInfoName();
    }
    public void setAge() {
        Age = InputData.InputInfoAge();
    }    
    public void setAddress() {
        Address = InputData.InputInfoAddress();
    }

    public void setID(String info) {
        ID = InputData.CutStringFrom(info, 1);
    }

    public void setName(String info){
        this.Name = InputData.CutStringFrom(info, 2);
    }
    public void setAge(String info){
        this.Age = InputData.CutStringFrom(info, 3);
    }
    public void setAddress(String info){
        this.Address = InputData.CutStringFrom(info, 4);
    }

    public String getID(){
        return ID;
    }

    public String getName() {
        return Name;
    }
    public String getAge() {
        return Age;
    }
    public String getAddress() {
        return Address;
    }

    public String toString(){
        return "|" + getID() + "|" + getName() + "|" + getAge() + "|" + getAddress() + "|";
    }

}
package Models.Information;

public class PersonnelInformation extends Information {
    
    public PersonnelInformation(int ID){
        super(ID);
    }

    public PersonnelInformation(String info){
        super(info);
    }
}
package Models.Information;


public class UserInformation extends Information{
    
    public UserInformation(int ID){
        super(ID);
    }
    
    public UserInformation(String info){
        super(info);
    }
}
package Views.Admins;

import Controllers.AdminMenu.ControlAdminMenu;

public class AdminMenu {

    public static void Menu() {

        do {
           System.out.println("\n***************** Welcome to Mei Store *****************");
           System.out.println("** (1) Goods Manager                                    **");
           System.out.println("** (2) Personnel Manager                                **");
           System.out.println("** (3) Your Information                                 **");
           System.out.println("** (4) Logout                                           **");
       } while (ControlAdminMenu.SelectOption(4));

    }
}
package Views.Admins;

import Controllers.AdminMenu.ControlGoodManager;

public class GoodsManagerMenu {
    public static void Menu() {

        do{
            System.out.println();
            System.out.println();
            System.out.println();
            System.out.println();
            System.out.println();
        } while(ControlGoodManager.SelectOption(5));
    }
}
package Views.Admins;

import Controllers.AdminMenu.ControlPersonnelManager;

public class PersonnelManagementMenu {
    public static void Menu(){
        // Accept Personnel Account
        // Time for word
        // Remove Personnel Account
        do {
            System.out.println();
            System.out.println();
            System.out.println();
        } while(ControlPersonnelManager.SelectOption(3));
    }
}
package Views.Main;

import Controllers.MainMenu.Login;

public class LoginMenu {
    public static void Menu() {
        System.out.println("***************** Welcome to Mei Store *****************");
        System.out.println("** You can login with your UserName and your Password **");
        System.out.println("**                                                    **");

        Login.LoginForm();
    }
}
package Views.Main;

import Controllers.MainMenu.ControlMainMenu;

public class MainMenu {
    public static void main(String[] args) {

        do{
            System.out.println("***************** Welcome to Mei Store *****************");
            System.out.println("** Mei Store is clothing store.You can order it here  **");
            System.out.println("** How to use?                                        **");
            System.out.println("**   Input a number sentence beginning your choose    **");
            System.out.println("**   - - - - - - - - - - - - - - - - - - - - - - - -  **");
            System.out.println("**  (1) Login                                         **");
            System.out.println("**  (2) Sign up                                       **");
            System.out.println("**  (3) Forgot your password ?                        **");
            System.out.println("**  (4) Exit                                          **");
        } while (ControlMainMenu.SelectOption(4));

    }
}
package Views.Main;

import Controllers.MainMenu.SignUp;

public class SignUpMenu {
    public static void Menu() {
        System.out.println("***************** Welcome to Mei Store *****************");
        System.out.println("** What account do you want to create ?               **");
        System.out.println("** (1) Users Account                                  **");
        System.out.println("** (2) Personnel Account                              **");
        System.out.println("** (3) Admin Account                                  **");
        System.out.println("** (4) Back                                           **");

        SignUp.ControlSignUp(4);
    }
}
package Views.Personnel;

import Controllers.PersonnelMenu.ControlOrderManager;

public class OrderManagerMenu {
    public static void Menu(){
        do{
            System.out.println();
            System.out.println();
            System.out.println();
        } while(ControlOrderManager.SelectOption(3));
    }

}
package Views.Personnel;

import Controllers.PersonnelMenu.ControlPersonnelMenu;

public class PersonnelMenu {

    public static void Menu() {

        do {
            System.out.println("***************** Welcome to Mei Store *****************");
            System.out.println("** (1) Check Order                                    **");
            System.out.println("** (2) Check Goods                                    **");
            System.out.println("** (3) Your Information                               **");
            System.out.println("** (4) Logout                                         **");
        } while (ControlPersonnelMenu.SelectOption(4));

    }

}
package Views.Users;

import Controllers.UserMenu.ControlUserMenu;

public class UserMenu {

    public static void Menu(String IDUser) {

        do {
            System.out.println("***************** Welcome to Mei Store *****************");
            System.out.println("** (1) Order                                          **");
            System.out.println("** (2) Your Order                                     **");
            System.out.println("** (3) Your Information                               **");
            System.out.println("** (4) Logout                                         **");
        } while (ControlUserMenu.SelectOption(4 , IDUser));

    }
}
package Views;

public interface ProgramLog {
    String inputChooseNotify = "Number of your choose: ";

    String inputUserName = "Phone Number: ";
    String inputPassword = "Password: ";

    String SecurityQuestion = "\nSecurity Question help you reset account password!";
    String SecurityQuestion1 = "The name of your high school?";
    String SecurityQuestion2 = "The flower you like best?";
    String SecurityQuestion3 = "Animals you like best?";

    String inputSecurityAnswer = "Your answer: ";

    String inputAdminCode = "\nAdmin code is 4 number ****. You need to confirm to create admin account.\nAdmin code: ";

    String LoginNotSuccess = "\nUsername or password incorrect!";    

    String ContinueOrExitMenu = "Do you want continue? \n (1) Yes \n (2) Exit";
    
    String CreateAccountSuccess = "\nCreate account success! Import your information.";
    String CreatePersonnelAccountSuccess = "\nCreate account success! Please wait for admin accept.";

    String inputInfoName = "Name: ";
    String inputInfoAge = "Age: ";
    String inputInfoAddress = "Address: ";

    String inputIDItem = "ID Item : ";
    String inputNameItem = "Name Item: ";
    String inputAmountItem = "Amount Item: ";
    String inputPriceItem = "Item Price: ";

    String BuyItemSuccess = "Buy item success!";
}
package Views;

public interface ProgramLogException {
    String eUserChooseNotNumber = "Please enter only one digit !";
    String eUserChooseLength = "Please enter number at the beginning of the choose!";

    String eLengthMobilNumber = "Your phone number not enough 10 number! Please import again";
    String eUserNameIsNumber = "Your username not a mobile phone number! Please import again";        
    String eUserNameDelicate = "Your username is available! Please import again";
    String ePasswordLength = "Your password length less 12 and bigger 6";
    String eAccountNotActivated = "Your account not activated!";
    String ePasswordIsNumberAndLetter = "Your password is only number and letter! Please import again";
    String eStringAllNotLetter = "Your input must be string with all is letter. Please import again!";
    String eAdminCode = "Admin code is all number! Please import again.";    
    String eAdminCodeIncorrect = "Admin code incorrect!";    
    String eInputInfoName = "Please enter your real name!";
    String eInputInfoAge = "Please enter your real age!";
    String eInputInfoAddress = "Please enter your real address!";

    String eAnswerNotCorrect = "The answer is not correct!";
    String eAccountNotFound = "Username not found!";

    String eIDItemNotFound = "The ID Item not found!";    
    String eNameItemNotCorrect = "The name of item is string and number! Please import again.";
    String eAmountItemNotCorrect = "The amount of item is only number! Please import again.";
    String ePriceItemNotCorrect = "The item price is only number! Please import again.";        
    String eAmountItemTooMuch = "You buy too much.Please reduce the amount!";

    String eBuyItemNotSuccess = "Buy item not Success!";
}
